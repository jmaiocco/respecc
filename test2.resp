gimme s : String = "Hi"
gimme n : Number = s.length()
gimme arr : Array<Number> = [6]
gimme n2 : Number = arr.length()
gimme a = 1
gimme b = 1
gimme c = 1
gimme d = 1
gimme e = 1
gimme f = 1
gimme g = 1
/*
Hello!
  Have you ever heard of a Dog? Let's get classy...
  Please declare name as a String.
  To construct a Dog by using (name as a String), could you...
    Please populate this.name with name.
  Thank You.
  Favor getName() as a String could you...
    Kindly return this.name
  Thank You.

Thank You.
Please declare cc as Dog("cece")
print(cc.getName())
Bye Bye!



Hello!
Have you ever heard of a Dog? Let's get classy...
    Have you ever heard of a Ball? Let's get classy...
      Please declare color as a String.
      To construct a Ball by using (color as a String), could you...
        Please populate this.color with color.
      Thank You.
    Thank You.
    Please declare name as a String.
    Please declare ball as a Ball.
    To construct a Dog by using (name as a String), could you...
      Please populate this.name with name.
    Thank You.
    Favor getName() as a String could you...
      Kindly return this.name
    Thank You.
Thank You.
Please declare cc as Dog("cece")
print(cc.getName())

gimme s : String = "Hi"
gimme n : Number = s.length()

gimme arr : Array<Number> = [6]
gimme n2 : Number = arr.length()
*/
/*

function f() : Void {
}

Bye Bye!
*/

/*
class Block {
  gimme x = 5
  Block(gfg : String) {
    this.x = 6
  }

  function inner(var) {

  }
}

gimme y : Block = Block("d")
gimme zzz = the result of running y.inner with ("Hello")
*/
/*
function Fibonacci(n, length) {
if (n == 1) {
  gimme series = [0, 1]
  return series
} else {
  series = Fibonacci(n - 1, length - 1)
  series[length] = series[length minus 1] plus series[length minus 2]
  return series
}
}

Fibonacci(12, 12)

/*
class Block {
  gimme x = 5
  Block(gfg : String) {
    this.x = 6
  }
}
gimme y : Block = Block("d")
gimme z = y.x

//What if multiple untyped constructors
//have the same # of arguments?
*/
